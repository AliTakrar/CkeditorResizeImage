@{
    ViewData["Title"] = "Home Page";
}
@*<script src="~/ckeditor5-build-classic/ckeditor.js"></script>
    <div class="text-center">
    <input type="text" id="CKeditor" />
    </div>
*@

<!--begin::Global تم Styles(used by all pages)-->
<link href="~/assets/plugins/global/plugins.bundle.rtl.css?v=7.0.6" rel="stylesheet" type="text/css" />
<link href="~/assets/plugins/custom/prismjs/prismjs.bundle.rtl.css?v=7.0.6" rel="stylesheet" type="text/css" />
<link href="~/assets/css/style.bundle.rtl.css?v=7.0.6" rel="stylesheet" type="text/css" />
<!--end::Global تم Styles-->


<div class="card card-custom">
    <div class="card-header">
        <h3 class="card-title">
            نسخه ی نمایشی with Images
        </h3>
    </div>
    <div class="card-body">
        <div id="kt-ckeditor-2-toolbar"></div>
        <div id="kt-ckeditor-2">
        </div>
    </div>
</div>


<!--begin::Global Config(global config for global جی اس scripts)-->
<script>
                var KTAppSettings  = {
        "breakpoints": {
            "sm": 576,
            "md": 768,
            "lg": 992,
            "xl": 1200,
            "xxl": 1200
        },
        "colors": {
            "theme": {
                "base": {
                    "white": "#ffffff",
                    "primary": "#6993FF",
                    "secondary": "#E5EAEE",
                    "success": "#1BC5BD",
                    "info": "#8950FC",
                    "warning": "#FFA800",
                    "danger": "#F64E60",
                    "light": "#F3F6F9",
                    "dark": "#212121"
                },
                "light": {
                    "white": "#ffffff",
                    "primary": "#E1E9FF",
                    "secondary": "#ECF0F3",
                    "success": "#C9F7F5",
                    "info": "#EEE5FF",
                    "warning": "#FFF4DE",
                    "danger": "#FFE2E5",
                    "light": "#F3F6F9",
                    "dark": "#D6D6E0"
                },
                "inverse": {
                    "white": "#ffffff",
                    "primary": "#ffffff",
                    "secondary": "#212121",
                    "success": "#ffffff",
                    "info": "#ffffff",
                    "warning": "#ffffff",
                    "danger": "#ffffff",
                    "light": "#464E5F",
                    "dark": "#ffffff"
                }
            },
            "gray": {
                "gray-100": "#F3F6F9",
                "gray-200": "#ECF0F3",
                "gray-300": "#E5EAEE",
                "gray-400": "#D6D6E0",
                "gray-500": "#B5B5C3",
                "gray-600": "#80808F",
                "gray-700": "#464E5F",
                "gray-800": "#1B283F",
                "gray-900": "#212121"
            }
        },
        "font-family": "Poppins"
    };
</script>
<!--end::Global Config-->
<!--begin::Global تم Bundle(used by all pages)-->
<script src="~/assets/plugins/global/plugins.bundle.js?v=7.0.6"></script>
<script src="~/assets/plugins/custom/prismjs/prismjs.bundle.js?v=7.0.6"></script>
<script src="~/assets/js/scripts.bundle.js?v=7.0.6"></script>
<!--end::Global تم Bundle-->
<!--begin::Page Vendors(used by this page)-->
<script src="~/assets/plugins/custom/ckeditor/ckeditor-document.bundle.js?v=7.0.6"></script>
<!--end::Page Vendors-->
<!--begin::Page Scripts(used by this page)-->
@*<script src="~/assets/js/pages/crud/forms/editors/ckeditor-document.js?v=7.0.6"></script>*@
<!--end::Page Scripts-->
<script>
                class MyUploadAdapter {
                constructor( loader ) {
                    // The file loader instance to use during the upload. It sounds scary but do not
                    // worry — the loader will be passed into the adapter later on in this guide.
                    this.loader = loader;
                }

                // Starts the upload process.
                upload() {
                    return this.loader.file
                        .then( file => new Promise( ( resolve, reject ) => {
                            this._initRequest();
                            this._initListeners( resolve, reject, file );
                            this._sendRequest( file );
                        } ) );
                }

                // Aborts the upload process.
                abort() {
                    if ( this.xhr ) {
                        this.xhr.abort();
                    }
                }

                 _initRequest() {
                const xhr = this.xhr = new XMLHttpRequest();

                // Note that your request may look different. It is up to you and your editor
                // integration to choose the right communication channel. This example uses
                // a POST request with JSON as a data structure but your configuration
                // could be different.
                xhr.open( 'POST', '@Url.Action("UploadImage","Home")', true );
                xhr.responseType = 'json';
            }

            // Initializes XMLHttpRequest listeners.
            _initListeners( resolve, reject, file ) {
                const xhr = this.xhr;
                const loader = this.loader;
                const genericErrorText = `Couldn't upload file: ${ file.name }.`;

                xhr.addEventListener( 'error', () => reject( genericErrorText ) );
                xhr.addEventListener( 'abort', () => reject() );
                xhr.addEventListener( 'load', () => {
                    const response = xhr.response;

                    // This example assumes the XHR server's "response" object will come with
                    // an "error" which has its own "message" that can be passed to reject()
                    // in the upload promise.
                    //
                    // Your integration may handle upload errors in a different way so make sure
                    // it is done properly. The reject() function must be called when the upload fails.
                    if ( !response || response.error ) {
                        return reject( response && response.error ? response.error.message : genericErrorText );
                    }

                    // If the upload is successful, resolve the upload promise with an object containing
                    // at least the "default" URL, pointing to the image on the server.
                    // This URL will be used to display the image in the content. Learn more in the
                    // UploadAdapter#upload documentation.
                    resolve( {
                        default: response.url
                    } );
                } );

                // Upload progress when it is supported. The file loader has the #uploadTotal and #uploaded
                // properties which are used e.g. to display the upload progress bar in the editor
                // user interface.
                if ( xhr.upload ) {
                    xhr.upload.addEventListener( 'progress', evt => {
                        if ( evt.lengthComputable ) {
                            loader.uploadTotal = evt.total;
                            loader.uploaded = evt.loaded;
                        }
                    } );
                }
            }


            // Prepares the data and sends the request.
            _sendRequest( file ) {
                // Prepare the form data.
                const data = new FormData();

                data.append( 'upload', file );

                // Important note: This is the right place to implement security mechanisms
                // like authentication and CSRF protection. For instance, you can use
                // XMLHttpRequest.setRequestHeader() to set the request headers containing
                // the CSRF token generated earlier by your application.

                // Send the request.
                this.xhr.send( data );
            }

            }

            function MyCustomUploadAdapterPlugin( editor ) {
            editor.plugins.get( 'FileRepository' ).createUploadAdapter = ( loader ) => {
                // Configure the URL to the upload script in your back-end here!
                return new MyUploadAdapter( loader );
            };
        }



                //ClassicEditor
                //.create(document.querySelector('#CKeditor'),{
                //     extraPlugins: [ MyCustomUploadAdapterPlugin ],
                //}).then( editor => {
                //    window.editor = editor;
                //})
                //.catch(err => {
                //    console.error(err.stack);
                //})


                // کلاس definition

    var KTCkeditorDocument = function () {
        // خصوصی functions
        var demos = function () {
            DecoupledEditor
                .create( document.querySelector( '#kt-ckeditor-2' ) ,{
                     
                     extraPlugins: [ MyCustomUploadAdapterPlugin ,Image ],
                })
                .then( editor => {
                    const toolbarContainer = document.querySelector( '#kt-ckeditor-2-toolbar' );

                    toolbarContainer.appendChild( editor.ui.view.toolbar.element );
                } )
                .catch( error => {
                    console.error( error );
                } );
        }

        return {
            // public functions
            init: function() {
                demos();
            }
        };
    }();

    // Initialization
    jQuery(document).ready(function() {
        KTCkeditorDocument.init();
    });
</script>
